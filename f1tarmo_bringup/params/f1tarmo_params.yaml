
bicycle_controller_node:
  ros__parameters:
    # bicycle controller parameters
    wheelbase: 0.33 # TODO: This parameter should indicate meters in its name. I.e., wheelbase_m

vesc_to_odom_node:
  ros__parameters:
    odom_frame: odom
    base_frame: base_link
    # publish odom to base link tf
    publish_tf: false
    use_servo_cmd_to_calc_angular_velocity: true
    # car wheelbase is about 25cm
    wheelbase: 0.33

    # erpm (electrical rpm) = speed_to_erpm_gain * speed (meters / second) + speed_to_erpm_offset
    speed_to_erpm_gain: 4614.0
    speed_to_erpm_offset: 0.0

    # servo value (0 to 1) =  steering_angle_to_servo_gain * steering angle (radians) + steering_angle_to_servo_offset
    steering_angle_to_servo_gain: 1.2135
    steering_angle_to_servo_offset: 0.49

    port: /dev/sensors/vesc
    duty_cycle_min: 0.0
    duty_cycle_max: 0.0
    current_min: 0.0
    current_max: 100.0
    brake_min: -20000.0
    brake_max: 200000.0
    speed_min: -23250.0
    speed_max: 23250.0
    position_min: 0.0
    position_max: 0.0
    servo_min: 0.15
    servo_max: 0.85

    

# TODO: Add section for all the parameters that are only applied to all vesc
# nodes using a wildcard expression that looks for "vesc" in the node name.
ackermann_to_vesc_node:
  # general parameters shared by all vesc-related nodes
  ros__parameters:
    # erpm (electrical rpm) = speed_to_erpm_gain * speed (meters / second) + speed_to_erpm_offset
    speed_to_erpm_gain: 4614.0
    speed_to_erpm_offset: 0.0

    # servo value (0 to 1) =  steering_angle_to_servo_gain * steering angle (radians) + steering_angle_to_servo_offset
    steering_angle_to_servo_gain: 1.2135
    steering_angle_to_servo_offset: 0.49

    port: /dev/sensors/vesc
    duty_cycle_min: 0.0
    duty_cycle_max: 0.0
    current_min: 0.0
    current_max: 100.0
    brake_min: -20000.0
    brake_max: 200000.0
    speed_min: -23250.0
    speed_max: 23250.0
    position_min: 0.0
    position_max: 0.0
    servo_min: 0.15
    servo_max: 0.85


vesc_to_odom_node:
  # general parameters shared by all vesc-related nodes
  ros__parameters:
    # erpm (electrical rpm) = speed_to_erpm_gain * speed (meters / second) + speed_to_erpm_offset
    speed_to_erpm_gain: 4614.0
    speed_to_erpm_offset: 0.0

    # servo value (0 to 1) =  steering_angle_to_servo_gain * steering angle (radians) + steering_angle_to_servo_offset
    steering_angle_to_servo_gain: 1.2135
    steering_angle_to_servo_offset: 0.49

    port: /dev/sensors/vesc
    duty_cycle_min: 0.0
    duty_cycle_max: 0.0
    current_min: 0.0
    current_max: 100.0
    brake_min: -20000.0
    brake_max: 200000.0
    speed_min: -23250.0
    speed_max: 23250.0
    position_min: 0.0
    position_max: 0.0
    servo_min: 0.15
    servo_max: 0.85

vesc_driver_node:
  # general parameters shared by all vesc-related nodes
  ros__parameters:
    # erpm (electrical rpm) = speed_to_erpm_gain * speed (meters / second) + speed_to_erpm_offset
    speed_to_erpm_gain: 4614.0
    speed_to_erpm_offset: 0.0

    # servo value (0 to 1) =  steering_angle_to_servo_gain * steering angle (radians) + steering_angle_to_servo_offset
    steering_angle_to_servo_gain: 1.2135
    steering_angle_to_servo_offset: 0.49

    port: /dev/sensors/vesc
    duty_cycle_min: 0.0
    duty_cycle_max: 0.0
    current_min: 0.0
    current_max: 100.0
    brake_min: -20000.0
    brake_max: 200000.0
    speed_min: -23250.0
    speed_max: 23250.0
    position_min: 0.0
    position_max: 0.0
    servo_min: 0.15
    servo_max: 0.85

joystick_interface_node:
  ros__parameters:
    # Pretty sure these are all currently default values. Taken directly from
    # rqt dynamic reconfigure plugin.
    autorepeat_rate: 20.0
    coalesce_interval_ms: 1
    deadzone: 0.05
    device_id: 0
    device_name: ''
    qos_overrides./parameter_events.publisher.depth: 1000
    qos_overrides./parameter_events.publisher.durability: volatile
    qos_overrides./parameter_events.publisher.history: keep_last
    qos_overrides./parameter_events.publisher.reliability: reliable
    sticky_buttons: false
    use_sim_time: false

joystick_to_twist_node:
  ros__parameters:
    # Most of these are defaults taken directly from rqt dynamic reconfigure
    # plugin.. The main values that we needed to set here were which axis was
    # used for x, y, z, roll, pitch, and yaw control.
    axis_angular.pitch: -1
    axis_angular.roll: -1
    axis_angular.yaw: 3
    axis_linear.x: 1
    axis_linear.y: 0
    axis_linear.z: -1
    enable_button: 4
    enable_turbo_button: 5
    frame: teleop_twist_joy
    inverted_reverse: false
    publish_stamped_twist: false
    qos_overrides./parameter_events.publisher.depth: 1000
    qos_overrides./parameter_events.publisher.durability: volatile
    qos_overrides./parameter_events.publisher.history: keep_last
    qos_overrides./parameter_events.publisher.reliability: reliable
    require_enable_button: true
    scale_angular.pitch: 0.0
    scale_angular.roll: 0.0
    scale_angular.yaw: 0.5
    scale_angular_turbo.pitch: 0.0
    scale_angular_turbo.roll: 0.0
    scale_angular_turbo.yaw: 1.0
    scale_linear.x: 1.0
    scale_linear.y: 0.0
    scale_linear.z: 0.0
    scale_linear_turbo.x: 5.0
    scale_linear_turbo.y: 0.0
    scale_linear_turbo.z: 0.0
    use_sim_time: false